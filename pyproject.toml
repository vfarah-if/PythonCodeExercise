[project]
name = "python-code-exercise"
version = "0.1.0"
description = "A modern Python kata practice environment for TDD exercises"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pytest>=8.0.0",
    "pytest-watch>=4.2.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest-xdist>=3.5.0",  # For parallel test execution
    "pytest-mock>=3.12.0",  # For mocking in tests
    "ipython>=8.20.0",       # For better debugging experience
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*Protocol:",
    "@abstractmethod",
]

[tool.ruff]
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "N",     # pep8-naming
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",  # Use of assert (needed for pytest)
    "SIM117", # Multiple contexts (okay in tests)
]

[tool.pytest-watch]
patterns = ["*.py"]
ignore = [".git", ".venv", "__pycache__", "*.pyc", ".pytest_cache", ".coverage"]
clear = true
runner = "pytest"
runner_args = ["-x", "--ff", "-q"]